import glob
import pandas as pd
import os.path

bam_paths = ["/shahlab/archive/DG1243N/A32115/merge_bwa/hg19a/A32115_3_lanes_dupsFlagged.bam"]
sample_names = pd.Series(bam_paths).apply(os.path.basename).replace(".bam","", regex=True)
sample_dic = dict(zip(sample_names, bam_paths))

rule all:
    input:
        bam=expand("dedup/{sample}.bam", sample=sample_names),
        metrics=expand("dedup/{sample}.metrics.txt", sample=sample_names),
        index=expand("dedup/{sample}.bam.bai", sample=sample_names)

#rule all:
#    input:
#    	expand("/shahlab/archive/misc/sbeatty/todo-130/realign/fastq/{sample}_R1.fastq", sample=sample_names),
#    	expand("/shahlab/archive/misc/sbeatty/todo-130/realign/fastq/{sample}_R2.fastq", sample=sample_names)

#rule all:
#	input:
#		expand("/shahlab/archive/misc/sbeatty/todo-130/realign/sorted_bam/{sample}.sorted.bam", sample=sample_names)

rule sort_name:
	input:
		lambda wildcards: sample_dic[wildcards.sample]
	output:
		"sorted_bam/{sample}.sorted.bam"
	shell:
		"samtools sort -n -o {output} -O bam -@ 20 {input}"

rule bam_to_fastq:
	input:
		"sorted_bam/{sample}.sorted.bam"
	output:
		fastq1="reads/{sample}_R1.fastq", 
		fastq2="reads/{sample}_R2.fastq"
	shell:
		"bedtools bamToFastq -i {input} -tags -fq {output.fastq1} -fq2 {output.fastq2}"

rule bwa_mem:
    input:
        reads=["reads/{sample}_R1.fastq", "reads/{sample}_R2.fastq"]
    output:
        "mapped/{sample}.bam"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        index="/shahlab/pipelines/reference/GRCh37-lite.fa",
        extra=r"-M -R '@RG\tID:{sample}\tSM:{sample}'",
        sort="samtools",             # Can be 'none', 'samtools' or 'picard'.
        sort_order="queryname",  # Can be 'queryname' or 'coordinate'.
        sort_extra="-m 10G"            # Extra args for samtools/picard.
    threads: 18
    wrapper:
        "file:wrappers/bwa_mem"

rule samtools_sort:
    input:
        "mapped/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-@ 20 -O bam -o {output} {input}"

#3) picard markdups
rule mark_duplicates:
    input:
        "sorted_reads/{sample}.bam"
    output:
        bam="dedup/{sample}.bam",
        metrics="dedup/{sample}.metrics.txt"
    log:
        "logs/picard/dedup/{sample}.log"
    shell:
        "/shahlab/pipelines/apps_centos6/jdk1.8.0_51/bin/java -jar /shahlab/pipelines/apps_centos6/picard-tools-1.119/MarkDuplicates.jar I={input} OUTPUT={output.bam} M={output.metrics}"

#"java -jar /shahlab/pipelines/apps_centos6/picard-tools-1.141/picard.jar MarkDuplicates I={input} OUTPUT={output.bam} M={output.metrics}"

##4) samtools index
rule samtools_index:
    input:
        "dedup/{sample}.bam"
    output:
        "dedup/{sample}.bam.bai"
    params:
        "" # optional params string
    wrapper:
        "file:wrappers/samtools_index"